"""
Вы с друзьями периодически собираетесь на лавке у подъезда выпить чаю с баранками. Каждый раз собирается разное количество человек, которое должно скинуть по n рублей на мероприятие. Также у вас в компании есть общак, в который можно докинуть денег, а можно взять. Все транзакции в общак логируются, т.е. у вас есть информация о каждом переводе денег в/из общака для каждого из друзей. Ваша задача - посчитать, сколько денег должен каждый из собравшихся на мероприятие друзей на момент начала мероприятия. Будем считать, что все деньги проходят через общак, поэтому у каждого друга к началу мероприятия уже есть некоторый "баланс" в общаке.

Формат хранения данных
Все операции с деньгами хранятся в базе данных и приходят к вам в виде списка словарей вида:

    {"name": "Василий", "amount": 500},
    {"name": "Петя", "amount": 100},
    {"name": "Василий", "amount": -300},
]
где name - имя друга (считаем, что всех зовут по-разному), amount - сумма, которая добавлена в общак. Если сумма отрицательная - это значит, что друг взял деньги из общака. Также считаем, что скидываются суммы в рублях без копеек.

Вы должны написать две функции:
1. get_balance(name, transactions) -> int: функция, которая возвращает текущий баланс друга с именем name, исходя из списка транзакций transactions. Если имя name ни разу не встречается в списке transactions, считаем, что баланс этого друга в общаке равен 0 рублей.

2. count_debts(names, amount, transactions) -> dict: функция, которая принимает список имен присутствующих на мероприятии друзей names, стоимость баранок и чая на человека amount, а также список транзакций в общак transactions. Возвращает словарь вида {"имя_друга": сумма}, где сумма - количество денег, которое он должен скинуть на мероприятие. Если на балансе друга больше денег, чем требуется на мероприятие, то он должен 0 рублей.
"""
def get_balance(name, transactions) -> int:
    balance = 0
    for trans in transactions: 
        if trans["name"] == name: 
            balance += trans["amount"]
    return balance
def count_debts(names, amount, transactions) -> dict:
    res = {}
    for name in names:
        b = get_balance(name, transactions)
        debt = amount - b if b < amount else 0 
        res[name] = debt
    return res
